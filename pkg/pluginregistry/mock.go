// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onosproject/onos-config/pkg/pluginregistry (interfaces: PluginRegistry)

// Package pluginregistry is a generated GoMock package.
package pluginregistry

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	admin "github.com/onosproject/onos-api/go/onos/config/admin"
	v2 "github.com/onosproject/onos-api/go/onos/config/v2"
)

// MockPluginRegistry is a mock of PluginRegistry interface.
type MockPluginRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockPluginRegistryMockRecorder
}

// MockPluginRegistryMockRecorder is the mock recorder for MockPluginRegistry.
type MockPluginRegistryMockRecorder struct {
	mock *MockPluginRegistry
}

// NewMockPluginRegistry creates a new mock instance.
func NewMockPluginRegistry(ctrl *gomock.Controller) *MockPluginRegistry {
	mock := &MockPluginRegistry{ctrl: ctrl}
	mock.recorder = &MockPluginRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginRegistry) EXPECT() *MockPluginRegistryMockRecorder {
	return m.recorder
}

// GetPlugin mocks base method.
func (m *MockPluginRegistry) GetPlugin(arg0 v2.TargetType, arg1 v2.TargetVersion) (ModelPlugin, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugin", arg0, arg1)
	ret0, _ := ret[0].(ModelPlugin)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPlugin indicates an expected call of GetPlugin.
func (mr *MockPluginRegistryMockRecorder) GetPlugin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugin", reflect.TypeOf((*MockPluginRegistry)(nil).GetPlugin), arg0, arg1)
}

// GetPlugins mocks base method.
func (m *MockPluginRegistry) GetPlugins() []ModelPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins")
	ret0, _ := ret[0].([]ModelPlugin)
	return ret0
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockPluginRegistryMockRecorder) GetPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockPluginRegistry)(nil).GetPlugins))
}

// NewClientFn mocks base method.
func (m *MockPluginRegistry) NewClientFn(arg0 func(string) (admin.ModelPluginServiceClient, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewClientFn", arg0)
}

// NewClientFn indicates an expected call of NewClientFn.
func (mr *MockPluginRegistryMockRecorder) NewClientFn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientFn", reflect.TypeOf((*MockPluginRegistry)(nil).NewClientFn), arg0)
}

// Start mocks base method.
func (m *MockPluginRegistry) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockPluginRegistryMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPluginRegistry)(nil).Start))
}

// Stop mocks base method.
func (m *MockPluginRegistry) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockPluginRegistryMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPluginRegistry)(nil).Stop))
}
