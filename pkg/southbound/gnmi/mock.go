// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onosproject/onos-config/pkg/southbound/gnmi (interfaces: ConnManager)

// Package gnmi is a generated GoMock package.
package gnmi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	topo "github.com/onosproject/onos-api/go/onos/topo"
)

// MockConnManager is a mock of ConnManager interface.
type MockConnManager struct {
	ctrl     *gomock.Controller
	recorder *MockConnManagerMockRecorder
}

// MockConnManagerMockRecorder is the mock recorder for MockConnManager.
type MockConnManagerMockRecorder struct {
	mock *MockConnManager
}

// NewMockConnManager creates a new mock instance.
func NewMockConnManager(ctrl *gomock.Controller) *MockConnManager {
	mock := &MockConnManager{ctrl: ctrl}
	mock.recorder = &MockConnManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnManager) EXPECT() *MockConnManagerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockConnManager) Connect(arg0 context.Context, arg1 *topo.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockConnManagerMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnManager)(nil).Connect), arg0, arg1)
}

// Disconnect mocks base method.
func (m *MockConnManager) Disconnect(arg0 context.Context, arg1 topo.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockConnManagerMockRecorder) Disconnect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockConnManager)(nil).Disconnect), arg0, arg1)
}

// Get mocks base method.
func (m *MockConnManager) Get(arg0 context.Context, arg1 ConnID) (Conn, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(Conn)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConnManagerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConnManager)(nil).Get), arg0, arg1)
}

// GetByTarget mocks base method.
func (m *MockConnManager) GetByTarget(arg0 context.Context, arg1 topo.ID) (Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTarget", arg0, arg1)
	ret0, _ := ret[0].(Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTarget indicates an expected call of GetByTarget.
func (mr *MockConnManagerMockRecorder) GetByTarget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTarget", reflect.TypeOf((*MockConnManager)(nil).GetByTarget), arg0, arg1)
}

// Watch mocks base method.
func (m *MockConnManager) Watch(arg0 context.Context, arg1 chan<- Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockConnManagerMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockConnManager)(nil).Watch), arg0, arg1)
}
